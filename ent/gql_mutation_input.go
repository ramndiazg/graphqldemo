// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
)

// CreateReviewInput represents a mutation input for creating reviews.
type CreateReviewInput struct {
	CreateTime    *time.Time
	UpdateTime    *time.Time
	Rating        int
	Comment       string
	CreatedAt     *time.Time
	ReviewerID    *uuid.UUID
	ReviwedToolID *uuid.UUID
}

// Mutate applies the CreateReviewInput on the ReviewMutation builder.
func (i *CreateReviewInput) Mutate(m *ReviewMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetRating(i.Rating)
	m.SetComment(i.Comment)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.ReviewerID; v != nil {
		m.SetReviewerID(*v)
	}
	if v := i.ReviwedToolID; v != nil {
		m.SetReviwedToolID(*v)
	}
}

// SetInput applies the change-set in the CreateReviewInput on the ReviewCreate builder.
func (c *ReviewCreate) SetInput(i CreateReviewInput) *ReviewCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateToolInput represents a mutation input for creating tools.
type CreateToolInput struct {
	CreateTime  *time.Time
	UpdateTime  *time.Time
	Name        string
	Description string
	Category    string
	Website     string
	ImageURL    string
	CreatedAt   *time.Time
	ReviewIDs   []uuid.UUID
}

// Mutate applies the CreateToolInput on the ToolMutation builder.
func (i *CreateToolInput) Mutate(m *ToolMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	m.SetCategory(i.Category)
	m.SetWebsite(i.Website)
	m.SetImageURL(i.ImageURL)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.ReviewIDs; len(v) > 0 {
		m.AddReviewIDs(v...)
	}
}

// SetInput applies the change-set in the CreateToolInput on the ToolCreate builder.
func (c *ToolCreate) SetInput(i CreateToolInput) *ToolCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreateTime   *time.Time
	UpdateTime   *time.Time
	Name         string
	Username     string
	Email        string
	PasswordHash string
	CreatedAt    *time.Time
	ReviewIDs    []uuid.UUID
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetName(i.Name)
	m.SetUsername(i.Username)
	m.SetEmail(i.Email)
	m.SetPasswordHash(i.PasswordHash)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.ReviewIDs; len(v) > 0 {
		m.AddReviewIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

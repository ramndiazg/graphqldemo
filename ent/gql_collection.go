// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"graphQlDemo/ent/review"
	"graphQlDemo/ent/tool"
	"graphQlDemo/ent/user"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *ReviewQuery) CollectFields(ctx context.Context, satisfies ...string) (*ReviewQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return r, nil
	}
	if err := r.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return r, nil
}

func (r *ReviewQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(review.Columns))
		selectedFields = []string{review.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "reviewer":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: r.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			r.withReviewer = query

		case "reviwedtool":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ToolClient{config: r.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, toolImplementors)...); err != nil {
				return err
			}
			r.withReviwedTool = query
		case "createTime":
			if _, ok := fieldSeen[review.FieldCreateTime]; !ok {
				selectedFields = append(selectedFields, review.FieldCreateTime)
				fieldSeen[review.FieldCreateTime] = struct{}{}
			}
		case "updateTime":
			if _, ok := fieldSeen[review.FieldUpdateTime]; !ok {
				selectedFields = append(selectedFields, review.FieldUpdateTime)
				fieldSeen[review.FieldUpdateTime] = struct{}{}
			}
		case "rating":
			if _, ok := fieldSeen[review.FieldRating]; !ok {
				selectedFields = append(selectedFields, review.FieldRating)
				fieldSeen[review.FieldRating] = struct{}{}
			}
		case "comment":
			if _, ok := fieldSeen[review.FieldComment]; !ok {
				selectedFields = append(selectedFields, review.FieldComment)
				fieldSeen[review.FieldComment] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		r.Select(selectedFields...)
	}
	return nil
}

type reviewPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ReviewPaginateOption
}

func newReviewPaginateArgs(rv map[string]any) *reviewPaginateArgs {
	args := &reviewPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &ReviewOrder{Field: &ReviewOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithReviewOrder(order))
			}
		case *ReviewOrder:
			if v != nil {
				args.opts = append(args.opts, WithReviewOrder(v))
			}
		}
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *ToolQuery) CollectFields(ctx context.Context, satisfies ...string) (*ToolQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return t, nil
	}
	if err := t.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return t, nil
}

func (t *ToolQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(tool.Columns))
		selectedFields = []string{tool.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "reviews":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ReviewClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, reviewImplementors)...); err != nil {
				return err
			}
			t.WithNamedReviews(alias, func(wq *ReviewQuery) {
				*wq = *query
			})
		case "createTime":
			if _, ok := fieldSeen[tool.FieldCreateTime]; !ok {
				selectedFields = append(selectedFields, tool.FieldCreateTime)
				fieldSeen[tool.FieldCreateTime] = struct{}{}
			}
		case "updateTime":
			if _, ok := fieldSeen[tool.FieldUpdateTime]; !ok {
				selectedFields = append(selectedFields, tool.FieldUpdateTime)
				fieldSeen[tool.FieldUpdateTime] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[tool.FieldName]; !ok {
				selectedFields = append(selectedFields, tool.FieldName)
				fieldSeen[tool.FieldName] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[tool.FieldDescription]; !ok {
				selectedFields = append(selectedFields, tool.FieldDescription)
				fieldSeen[tool.FieldDescription] = struct{}{}
			}
		case "category":
			if _, ok := fieldSeen[tool.FieldCategory]; !ok {
				selectedFields = append(selectedFields, tool.FieldCategory)
				fieldSeen[tool.FieldCategory] = struct{}{}
			}
		case "website":
			if _, ok := fieldSeen[tool.FieldWebsite]; !ok {
				selectedFields = append(selectedFields, tool.FieldWebsite)
				fieldSeen[tool.FieldWebsite] = struct{}{}
			}
		case "imageURL":
			if _, ok := fieldSeen[tool.FieldImageURL]; !ok {
				selectedFields = append(selectedFields, tool.FieldImageURL)
				fieldSeen[tool.FieldImageURL] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		t.Select(selectedFields...)
	}
	return nil
}

type toolPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ToolPaginateOption
}

func newToolPaginateArgs(rv map[string]any) *toolPaginateArgs {
	args := &toolPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &ToolOrder{Field: &ToolOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithToolOrder(order))
			}
		case *ToolOrder:
			if v != nil {
				args.opts = append(args.opts, WithToolOrder(v))
			}
		}
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return u, nil
	}
	if err := u.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return u, nil
}

func (u *UserQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(user.Columns))
		selectedFields = []string{user.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "reviews":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ReviewClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, reviewImplementors)...); err != nil {
				return err
			}
			u.WithNamedReviews(alias, func(wq *ReviewQuery) {
				*wq = *query
			})
		case "createTime":
			if _, ok := fieldSeen[user.FieldCreateTime]; !ok {
				selectedFields = append(selectedFields, user.FieldCreateTime)
				fieldSeen[user.FieldCreateTime] = struct{}{}
			}
		case "updateTime":
			if _, ok := fieldSeen[user.FieldUpdateTime]; !ok {
				selectedFields = append(selectedFields, user.FieldUpdateTime)
				fieldSeen[user.FieldUpdateTime] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[user.FieldName]; !ok {
				selectedFields = append(selectedFields, user.FieldName)
				fieldSeen[user.FieldName] = struct{}{}
			}
		case "username":
			if _, ok := fieldSeen[user.FieldUsername]; !ok {
				selectedFields = append(selectedFields, user.FieldUsername)
				fieldSeen[user.FieldUsername] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[user.FieldEmail]; !ok {
				selectedFields = append(selectedFields, user.FieldEmail)
				fieldSeen[user.FieldEmail] = struct{}{}
			}
		case "passwordHash":
			if _, ok := fieldSeen[user.FieldPasswordHash]; !ok {
				selectedFields = append(selectedFields, user.FieldPasswordHash)
				fieldSeen[user.FieldPasswordHash] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		u.Select(selectedFields...)
	}
	return nil
}

type userPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserPaginateOption
}

func newUserPaginateArgs(rv map[string]any) *userPaginateArgs {
	args := &userPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &UserOrder{Field: &UserOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithUserOrder(order))
			}
		case *UserOrder:
			if v != nil {
				args.opts = append(args.opts, WithUserOrder(v))
			}
		}
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}

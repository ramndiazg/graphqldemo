// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (r *Review) Reviewer(ctx context.Context) (*User, error) {
	result, err := r.Edges.ReviewerOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryReviewer().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (r *Review) ReviwedTool(ctx context.Context) (*Tool, error) {
	result, err := r.Edges.ReviwedToolOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryReviwedTool().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Tool) Reviews(ctx context.Context) (result []*Review, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedReviews(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.ReviewsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryReviews().All(ctx)
	}
	return result, err
}

func (u *User) Reviews(ctx context.Context) (result []*Review, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedReviews(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ReviewsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryReviews().All(ctx)
	}
	return result, err
}

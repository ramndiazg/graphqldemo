package graphQlDemo

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"graphQlDemo/ent"

	"github.com/google/uuid"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	uuidID, err := uuid.Parse(id)
	if err != nil {
		return nil, fmt.Errorf("invalid ID")
	}
	return r.client.Noder(ctx, uuidID)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	uuidIDs := make([]uuid.UUID, len(ids))
	for i, id := range ids {
		uuidID, err := uuid.Parse(id)
		if err != nil {
			return nil, fmt.Errorf("invalid ID")
		}
		uuidIDs[i] = uuidID
	}
	return r.client.Noders(ctx, uuidIDs)
}

// Reviews is the resolver for the reviews field.
func (r *queryResolver) Reviews(ctx context.Context) ([]*ent.Review, error) {
	return r.client.Review.Query().All(ctx)
}

// Tools is the resolver for the tools field.
func (r *queryResolver) Tools(ctx context.Context) ([]*ent.Tool, error) {
	return r.client.Tool.Query().All(ctx)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	return r.client.User.Query().All(ctx)
}

// ID is the resolver for the id field.
func (r *reviewResolver) ID(ctx context.Context, obj *ent.Review) (string, error) {
	return obj.ID.String(), nil
}

// ID is the resolver for the id field.
func (r *toolResolver) ID(ctx context.Context, obj *ent.Tool) (string, error) {
	return obj.ID.String(), nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *ent.User) (string, error) {
	return obj.ID.String(), nil
}

// ReviewerID is the resolver for the reviewerID field.
func (r *createReviewInputResolver) ReviewerID(ctx context.Context, obj *ent.CreateReviewInput, data *string) error {
	if data == nil {
		return nil
	}
	uuidValue, err := uuid.Parse(*data)
	if err != nil {
		return err
	}
	obj.ReviewerID = &uuidValue
	return nil
}

// ReviwedtoolID is the resolver for the reviwedtoolID field.
func (r *createReviewInputResolver) ReviwedtoolID(ctx context.Context, obj *ent.CreateReviewInput, data *string) error {
	if data == nil {
		return nil
	}
	uuidValue, err := uuid.Parse(*data)
	if err != nil {
		return err
	}
	obj.ReviwedToolID = &uuidValue
	return nil
}

// ReviewIDs is the resolver for the reviewIDs field.
func (r *createToolInputResolver) ReviewIDs(ctx context.Context, obj *ent.CreateToolInput, data []string) error {
	uuids := make([]uuid.UUID, len(data))
	for i, id := range data {
		uuidValue, err := uuid.Parse(id)
		if err != nil {
			return err
		}
		uuids[i] = uuidValue
	}
	obj.ReviewIDs = uuids
	return nil
}

// ReviewIDs is the resolver for the reviewIDs field.
func (r *createUserInputResolver) ReviewIDs(ctx context.Context, obj *ent.CreateUserInput, data []string) error {
	uuids := make([]uuid.UUID, len(data))
	for i, id := range data {
		uuidValue, err := uuid.Parse(id)
		if err != nil {
			return err
		}
		uuids[i] = uuidValue
	}
	obj.ReviewIDs = uuids
	return nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Review returns ReviewResolver implementation.
func (r *Resolver) Review() ReviewResolver { return &reviewResolver{r} }

// Tool returns ToolResolver implementation.
func (r *Resolver) Tool() ToolResolver { return &toolResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

// CreateReviewInput returns CreateReviewInputResolver implementation.
func (r *Resolver) CreateReviewInput() CreateReviewInputResolver {
	return &createReviewInputResolver{r}
}

// CreateToolInput returns CreateToolInputResolver implementation.
func (r *Resolver) CreateToolInput() CreateToolInputResolver { return &createToolInputResolver{r} }

// CreateUserInput returns CreateUserInputResolver implementation.
func (r *Resolver) CreateUserInput() CreateUserInputResolver { return &createUserInputResolver{r} }

type queryResolver struct{ *Resolver }
type reviewResolver struct{ *Resolver }
type toolResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
type createReviewInputResolver struct{ *Resolver }
type createToolInputResolver struct{ *Resolver }
type createUserInputResolver struct{ *Resolver }

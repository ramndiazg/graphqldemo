package graphQlDemo

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"graphQlDemo/auth"
	"graphQlDemo/ent"
	"graphQlDemo/ent/tool"
	"graphQlDemo/ent/user"
	"log"

	"github.com/google/uuid"
)

// Createreview is the resolver for the createreview field.
func (r *mutationResolver) Createreview(ctx context.Context, input ent.CreateReviewInput) (*ent.Review, error) {
	usr, ok := auth.UserFromContext(ctx)
	if !ok || usr.Role != "user" {
		return nil, fmt.Errorf("access denied")
	}

	if input.ReviwedToolID == nil {
		return nil, fmt.Errorf("reviwedToolID is required")
	}

	userUUID, err := uuid.Parse(usr.ID.String())
	if err != nil {
		return nil, fmt.Errorf("invalid user ID")
	}

	input.ReviewerID = &userUUID

	review, err := r.client.Review.Create().
		SetRating(input.Rating).
		SetComment(input.Comment).
		SetReviewerID(*input.ReviewerID).
		SetReviwedToolID(*input.ReviwedToolID).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create review: %w", err)
	}

	if _, err := r.UpdateToolAverageRating(ctx, input.ReviwedToolID.String()); err != nil {
		log.Printf("warning: failed to update average rating: %v", err)
	}

	if err := r.updateToolRating(ctx, *input.ReviwedToolID); err != nil {
        log.Printf("warning: failed to update tool rating: %v", err)
    }

	return review, nil
}

func (r *mutationResolver) updateToolRating(ctx context.Context, toolID uuid.UUID) error {
    reviews, err := r.client.Tool.
        Query().
        Where(tool.ID(toolID)).
        QueryReviews().
        All(ctx)
    if err != nil {
        return fmt.Errorf("failed to get reviews: %w", err)
    }

    var sum int
    for _, review := range reviews {
        sum += review.Rating
    }

    count := len(reviews)
    average := 0.0
    if count > 0 {
        average = float64(sum) / float64(count)
    }

    _, err = r.client.Tool.
        UpdateOneID(toolID).
        SetAverageRating(average).
        SetRatingCount(count).
        Save(ctx)
    if err != nil {
        return fmt.Errorf("failed to update tool rating: %w", err)
    }

    return nil
}

// Createuser is the resolver for the createuser field.
func (r *mutationResolver) Createuser(ctx context.Context, input ent.CreateUserInput) (*ent.User, error) {
	currentUser, ok := auth.UserFromContext(ctx)
	if !ok {
		return nil, fmt.Errorf("no user in context")
	}

	if currentUser.Role != "admin" {
		return nil, fmt.Errorf("admin role is required")
	}

	hashedPass, hashedPassErr := auth.HashPassword(input.PasswordHash)
	if hashedPassErr != nil {
		return nil, fmt.Errorf("error in create user")
	}
	return r.client.User.Create().
		SetName(input.Name).
		SetUsername(input.Username).
		SetEmail(input.Email).
		SetPasswordHash(hashedPass).
		Save(ctx)
}

// Createtool is the resolver for the createtool field.
func (r *mutationResolver) Createtool(ctx context.Context, input ent.CreateToolInput) (*ent.Tool, error) {
	currentUser, ok := auth.UserFromContext(ctx)
	if !ok {
		return nil, fmt.Errorf("no user in context")
	}

	if currentUser.Role != "admin" {
		return nil, fmt.Errorf("admin role is required")
	}

	return r.client.Tool.Create().
		SetName(input.Name).
		SetDescription(input.Description).
		SetCategory(input.Category).
		SetWebsite(input.Website).
		SetImageURL(input.ImageURL).
		Save(ctx)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, username string, password string) (*string, error) {
	user, userErr := r.client.User.
		Query().
		Where(user.Username(username)).
		Only(ctx)

	if userErr != nil {
		return nil, fmt.Errorf("password or user invalid")
	}
	if !auth.CheckPassword(password, user.PasswordHash) {
		return nil, fmt.Errorf("password or user invalid")
	}
	token, tokenErr := auth.CreateToken(user.Username)
	if tokenErr != nil {
		return nil, fmt.Errorf("password or user invalid")
	}

	return &token, tokenErr
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, username string, password string, email string) (*string, error) {
	exists, existsErr := r.client.User.
		Query().
		Where(user.Or(
			user.Username(username),
			user.Email(email),
		)).
		Exist(ctx)
	if existsErr != nil {
		return nil, fmt.Errorf("error checking if user exist")
	}
	if exists {
		return nil, fmt.Errorf("username or email already in use")
	}

	hashedPass, hashedPassErr := auth.HashPassword(password)
	if hashedPassErr != nil {
		return nil, fmt.Errorf("error hashing password")
	}

	_, createErr := r.client.User.Create().
		SetUsername(username).
		SetEmail(email).
		SetPasswordHash(hashedPass).
		SetRole("user").
		SetName(username).
		Save(ctx)
	if createErr != nil {
		return nil, fmt.Errorf("error creating user")
	}

	token, tokenErr := auth.CreateToken(username)
	if tokenErr != nil {
		return nil, fmt.Errorf("error generating token")
	}

	return &token, nil
}

// ChangePassword is the resolver for the changePassword field.
func (r *mutationResolver) ChangePassword(ctx context.Context, currentPassword string, newPassword string) (bool, error) {
	currentUser, ok := auth.UserFromContext(ctx)
	if !ok {
		return false, fmt.Errorf("no user in context")
	}

	valid := auth.CheckPassword(currentPassword, currentUser.PasswordHash)
	if !valid {
		return false, fmt.Errorf("current password is incorrect")
	}

	hashedPass, hashedPassErr := auth.HashPassword(newPassword)
	if hashedPassErr != nil {
		return false, fmt.Errorf("error in hash password")
	}

	r.client.User.UpdateOne(currentUser).SetPasswordHash(hashedPass).Exec(ctx)
	return true, nil
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, input UpdateProfileInput) (*ent.User, error) {
	currentUser, ok := auth.UserFromContext(ctx)
	if !ok {
		return nil, fmt.Errorf("authentication required")
	}

	update := r.client.User.UpdateOneID(currentUser.ID)
	if input.Name != nil {
		update.SetName(*input.Name)
	}

	if input.Email != nil {
		emailExists, emailExistsErr := r.client.User.
			Query().
			Where(user.EmailEQ(*input.Email)).
			Where(user.IDNEQ(currentUser.ID)).
			Exist(ctx)
		if emailExistsErr != nil {
			return nil, fmt.Errorf("error checking email availability")
		}
		if emailExists {
			return nil, fmt.Errorf("email already in use")
		}
		update.SetEmail(*input.Email)
	}

	if input.Username != nil {
		userNameExists, userNameExistsErr := r.client.User.
			Query().
			Where(user.UsernameEQ(*input.Username)).
			Where(user.IDNEQ(currentUser.ID)).
			Exist(ctx)
		if userNameExistsErr != nil {
			return nil, fmt.Errorf("error checking username availability")
		}
		if userNameExists {
			return nil, fmt.Errorf("username already in use")
		}
		update.SetUsername(*input.Username)
	}

	return update.Save(ctx)
}

// UpdateToolAverageRating is the resolver for the updateToolAverageRating field.
func (r *mutationResolver) UpdateToolAverageRating(ctx context.Context, toolID string) (*ToolAverageRatingResponse, error) {
	uuidID, err := uuid.Parse(toolID)
	if err != nil {
		return nil, fmt.Errorf("invalid tool ID")
	}

	tool, err := r.client.Tool.Get(ctx, uuidID)
	if err != nil {
		return nil, fmt.Errorf("tool not found")
	}

	reviews, err := tool.QueryReviews().All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get reviews")
	}

	var sum int
	var count int
	for _, review := range reviews {
		sum += review.Rating
		count++
	}

	var average float64
	if count > 0 {
		average = float64(sum) / float64(count)
	}

	return &ToolAverageRatingResponse{
		Tool:          tool,
		AverageRating: average,
		TotalReviews:  count,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }

package graphQlDemo

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"graphQlDemo/auth"
	"graphQlDemo/ent"
	"graphQlDemo/ent/user"
)

// Createreview is the resolver for the createreview field.
func (r *mutationResolver) Createreview(ctx context.Context, input ent.CreateReviewInput) (*ent.Review, error) {
	user, ok := ctx.Value("user").(*ent.User)
	if !ok || user.Role != "user" {
		return nil, fmt.Errorf("access denied")
	}

	if input.ReviewerID == nil || input.ReviwedToolID == nil {
		return nil, fmt.Errorf("reviewerID and reviwedtoolID are required")
	}

	return r.client.Review.Create().
		SetRating(input.Rating).
		SetComment(input.Comment).
		SetReviewerID(*input.ReviewerID).
		SetReviwedToolID(*input.ReviwedToolID).
		Save(ctx)
}

// Createuser is the resolver for the createuser field.
func (r *mutationResolver) Createuser(ctx context.Context, input ent.CreateUserInput) (*ent.User, error) {
	user, ok := ctx.Value("user").(*ent.User)
	if !ok || user.Role != "admin" {
		return nil, fmt.Errorf("access denied")
	}

	hashedPass, err := auth.HashPassword(input.PasswordHash)
	if err != nil {
		return nil, fmt.Errorf("error in create user")
	}
	return r.client.User.Create().
		SetName(input.Name).
		SetUsername(input.Username).
		SetEmail(input.Email).
		SetPasswordHash(hashedPass).
		Save(ctx)
}

// Createtool is the resolver for the createtool field.
func (r *mutationResolver) Createtool(ctx context.Context, input ent.CreateToolInput) (*ent.Tool, error) {
	user, ok := ctx.Value("user").(*ent.User)
	if !ok || user.Role != "admin" {
		return nil, fmt.Errorf("access denied")
	}

	return r.client.Tool.Create().
		SetName(input.Name).
		SetDescription(input.Description).
		SetCategory(input.Category).
		SetWebsite(input.Website).
		SetImageURL(input.ImageURL).
		Save(ctx)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, username string, password string) (*string, error) {
	user, err := r.client.User.
		Query().
		Where(user.Username(username)).
		Only(ctx)

	if err != nil {
		return nil, fmt.Errorf("password or user invalid")
	}
	if !auth.CheckPassword(password, user.PasswordHash) {
		return nil, fmt.Errorf("password or user invalid")
	}
	token, err := auth.CreateToken(user.Username)
	if err != nil {
		return nil, fmt.Errorf("password or user invalid")
	}

	return &token, err
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, username string, password string, email string) (*string, error) {
	panic(fmt.Errorf("not implemented: Register - register"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
